[1mdiff --git a/config/default.js b/config/default.js[m
[1mindex ce9b759..6ed4a14 100644[m
[1m--- a/config/default.js[m
[1m+++ b/config/default.js[m
[36m@@ -3,6 +3,11 @@[m [mmodule.exports = {[m
     host: 'http://pads6.pa-sport.com',[m
     port: '80',[m
     path: 'api',[m
[31m-    token: 'PUT YOUR TOKEN HERE'[m
[32m+[m[32m    token: 'HpczY2gP4f'[m
[32m+[m[32m  },[m
[32m+[m[41m  [m
[32m+[m[32m  cache: {[m
[32m+[m[32m    enable: true,[m
[32m+[m[32m    expire: 24 * 3600000[m
   }[m
 };[m
[1mdiff --git a/data/loaders/team.js b/data/loaders/team.js[m
[1mindex 7c04e6c..98654c1 100644[m
[1m--- a/data/loaders/team.js[m
[1m+++ b/data/loaders/team.js[m
[36m@@ -1,5 +1,5 @@[m
 import DataLoader from 'dataloader';[m
[31m-import { generateApiUrl } from '../../utils/api';[m
[32m+[m[32mimport { generateApiUrl, cachedFetch } from '../../utils/api';[m
 import fetch from 'node-fetch';[m
 [m
 export default new DataLoader((teamIds) => {[m
[36m@@ -11,8 +11,7 @@[m [mexport default new DataLoader((teamIds) => {[m
 [m
     console.log(url);[m
 [m
[31m-    return fetch(url)[m
[31m-      .then(res => res.json())[m
[32m+[m[32m    return cachedFetch(url)[m
       .then(json => { console.log(json); return json })[m
       .then(json => ({[m
         '@teamID': teamId,[m
[1mdiff --git a/data/queries/actions.js b/data/queries/actions.js[m
[1mindex b7f3839..c4d9387 100644[m
[1m--- a/data/queries/actions.js[m
[1m+++ b/data/queries/actions.js[m
[36m@@ -5,7 +5,7 @@[m [mimport {[m
 } from 'graphql';[m
 import { ActionType } from '../types';[m
 import { isValidDate, toAPIDate } from '../../utils/date';[m
[31m-import { generateApiUrl } from '../../utils/api';[m
[32m+[m[32mimport { generateApiUrl, cachedFetch } from '../../utils/api';[m
 import fetch from 'node-fetch';[m
 [m
 export default {[m
[36m@@ -23,8 +23,7 @@[m [mexport default {[m
       id[m
     );[m
 [m
[31m-    return fetch(url)[m
[31m-      .then(res => res.json())[m
[32m+[m[32m    return cachedFetch(url)[m
       .then(json => json.matchActions.actions.action)[m
   }[m
 }[m
[1mdiff --git a/data/queries/match.js b/data/queries/match.js[m
[1mindex c768258..870e68a 100644[m
[1m--- a/data/queries/match.js[m
[1m+++ b/data/queries/match.js[m
[36m@@ -3,7 +3,7 @@[m [mimport {[m
   GraphQLID,[m
 } from 'graphql';[m
 import { MatchType } from '../types';[m
[31m-import { generateApiUrl } from '../../utils/api';[m
[32m+[m[32mimport { generateApiUrl, cachedFetch } from '../../utils/api';[m
 import fetch from 'node-fetch';[m
 [m
 export default {[m
[36m@@ -21,8 +21,7 @@[m [mexport default {[m
       id[m
     );[m
 [m
[31m-    return fetch(url)[m
[31m-      .then(res => res.json())[m
[32m+[m[32m    return cachedFetch(url)[m
       .then(json => json.matches.match)[m
   }[m
 }[m
[1mdiff --git a/data/queries/matches.js b/data/queries/matches.js[m
[1mindex 42b3824..abf0295 100644[m
[1m--- a/data/queries/matches.js[m
[1m+++ b/data/queries/matches.js[m
[36m@@ -5,7 +5,7 @@[m [mimport {[m
 } from 'graphql';[m
 import { MatchType } from '../types';[m
 import { isValidDate, toAPIDate } from '../../utils/date';[m
[31m-import { generateApiUrl } from '../../utils/api';[m
[32m+[m[32mimport { generateApiUrl, cachedFetch } from '../../utils/api';[m
 import fetch from 'node-fetch';[m
 [m
 export default {[m
[36m@@ -27,8 +27,7 @@[m [mexport default {[m
       toAPIDate(date)[m
     );[m
 [m
[31m-    return fetch(url)[m
[31m-      .then(res => res.json())[m
[32m+[m[32m    return cachedFetch(url)[m
       .then(json => {[m
         const { match } = json.matches;[m
         if (Array.isArray(match)) {[m
[1mdiff --git a/data/types/MatchType.js b/data/types/MatchType.js[m
[1mindex 090b486..ab96950 100644[m
[1m--- a/data/types/MatchType.js[m
[1m+++ b/data/types/MatchType.js[m
[36m@@ -7,7 +7,7 @@[m [mimport {[m
 import TeamType from './TeamType';[m
 import ActionType from './ActionType';[m
 import CompetitionType from './CompetitionType';[m
[31m-import { generateApiUrl } from '../../utils/api';[m
[32m+[m[32mimport { generateApiUrl, cachedFetch } from '../../utils/api';[m
 import fetch from 'node-fetch';[m
 [m
 export default new GraphQLObjectType({[m
[36m@@ -39,8 +39,7 @@[m [mexport default new GraphQLObjectType({[m
           matchId[m
         );[m
 [m
[31m-        return fetch(url)[m
[31m-          .then(res => res.json())[m
[32m+[m[32m        return cachedFetch(url)[m
           .then(json => json.matchActions.actions.action)[m
       }[m
     }[m
[1mdiff --git a/package.json b/package.json[m
[1mindex 6e24a32..c85a8c0 100644[m
[1m--- a/package.json[m
[1m+++ b/package.json[m
[36m@@ -18,7 +18,11 @@[m
     "express": "^4.13.4",[m
     "express-graphql": "^0.5.3",[m
     "graphql": "^0.6.0",[m
[32m+[m[32m    "ioredis": "^2.0.1",[m
     "moment": "^2.13.0",[m
     "node-fetch": "^1.5.3"[m
[32m+[m[32m  },[m
[32m+[m[32m  "devDependencies": {[m
[32m+[m[32m    "nodemon": "^1.9.2"[m
   }[m
 }[m
[1mdiff --git a/utils/api.js b/utils/api.js[m
[1mindex 2eb3813..3ff5b4f 100644[m
[1m--- a/utils/api.js[m
[1m+++ b/utils/api.js[m
[36m@@ -1,5 +1,72 @@[m
 import config from 'config';[m
[32m+[m[32mimport Redis from 'ioredis';[m
[32m+[m[32mimport fetch from 'node-fetch';[m
[32m+[m
[32m+[m[32mconst redis = Redis();[m
 [m
 export function generateApiUrl(pathBeforeToken, pathAfterToken, isJSON = true) {[m
   return `${config.api.host}:${config.api.port}/${config.api.path}/${pathBeforeToken}/${config.api.token}/${pathAfterToken}${isJSON ? '/json' : ''}`;[m
 }[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * If cache param enabled, store info into the redis[m
[32m+[m[32m * @param url[m
[32m+[m[32m * @param expire[m
[32m+[m[32m * @returns {Promise}[m
[32m+[m[32m */[m
[32m+[m[32mexport function cachedFetch(url, {expire} = {}) {[m
[32m+[m[32m  return new Promise((resolve, reject) => {[m
[32m+[m
[32m+[m[32m    // if cache disabled, just fetch data from url[m
[32m+[m[32m    if (!config.cache.enable) {[m
[32m+[m[32m      return resolve(_fetchData(url))[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // try to get data from redis[m
[32m+[m[32m    redis.get(url, (err, result) => {[m
[32m+[m
[32m+[m[32m      // If error send reject[m
[32m+[m[32m      if (err) {[m
[32m+[m[32m        return reject(err);[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      // If data exists in the redis, then resolve it[m
[32m+[m[32m      if (result) {[m
[32m+[m[32m        return resolve(JSON.parse(result));[m
[32m+[m[32m      }[m
[32m+[m
[32m+[m[32m      // Try to set data to redis and resolve it on success[m
[32m+[m[32m      return _fetchData(url)[m
[32m+[m[32m        .then(json => {[m
[32m+[m
[32m+[m[32m          // Write json serialized data to redis and cache it[m
[32m+[m[32m          redis.pipeline().set(url, JSON.stringify(json)).expire(url, config.cache.expire || 3600000 * 24).exec((err, results) => {[m
[32m+[m
[32m+[m[32m            if (err) {[m
[32m+[m[32m              return reject(err);[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            // resolve our data[m
[32m+[m[32m            resolve(json);[m
[32m+[m
[32m+[m[32m        });[m[41m    [m
[32m+[m[32m      });[m
[32m+[m[32m    })[m
[32m+[m[32m  });[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Fetch data by url[m
[32m+[m[32m * @param url[m
[32m+[m[32m * @returns {Promise}[m
[32m+[m[32m * @private[m
[32m+[m[32m */[m
[32m+[m[32mfunction _fetchData(url) {[m
[32m+[m[32m  return new Promise((resolve, reject) => {[m
[32m+[m[32m    return fetch(url)[m
[32m+[m[32m      .then(res => res.json())[m
[32m+[m[32m      .then(resolve)[m
[32m+[m[32m      .catch(console.log)[m
[32m+[m[32m  })[m
[32m+[m[32m}[m
